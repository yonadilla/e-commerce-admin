// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  
}

model store {
  id          String  @id @default(uuid())
  name        String 
  userId      String
  billboard   Billboard[] @relation("StoreToBilboard")
  categories  Category[]  @relation("StoreToCategories")
  sizes       Size[] @relation("StoreToSize")
  color       Color[] @relation("StoreToColor")
  product     Product[] @relation("StoreToProduct")
  order       Order[]  @relation("StoreToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
  
model Billboard {

  id          String @id @default(uuid())
  storeId     String
  store       store @relation("StoreToBilboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Category[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt

  @@index([storeId])
}

model Category {
  id          String @id @default(uuid())
  storeId     String
  store       store @relation("StoreToCategories", fields: [storeId], references: [id])
  billboardId String
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  product     Product[] @relation("CategoryToProduct")
  name        String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size {
  id          String @id @default(uuid())
  storeId     String
  store       store  @relation("StoreToSize", fields: [storeId], references: [id])
  product     Product[] 
  name        String
  value       String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Color {
  id          String @id @default(uuid())
  storeId     String
  store       store  @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  product     Product[] 
  createdAt   DateTime    @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Product {
  id          String @id @default(uuid())
  storeId     String
  store       store @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String
  category    Category @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean  @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String
  size        Size @relation(fields: [sizeId], references: [id])
  colorId     String
  color       Color  @relation(fields: [colorId], references: [id])
  images      Image[]
  orderItem   OrderItem[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

model Image {
  id          String @id @default(uuid())
  productId   String
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([productId])
}

model Order {
  id          String @id @default(uuid())
  storeId     String
  store       store @relation("StoreToOrder", fields: [storeId], references: [id])
  orderItem   OrderItem[]
  isPaid      Boolean @default(false)
  phone       String
  address     String
  createdAt   DateTime @default(now())
  updateAt    DateTime  @updatedAt

  @@index([storeId])
}

model OrderItem {
  id          String @id @default(uuid())
  orderId     String
  order       Order @relation(fields: [orderId], references: [id])
  productId   String
  product     Product @relation(fields: [productId], references: [id])


  @@index([orderId])
  @@index([productId])
}